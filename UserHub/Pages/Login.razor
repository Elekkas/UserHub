@page "/login"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Authorization
@using Authorization.Interfaces
@using Blazored.LocalStorage
@using UserHub.Models

@inject IUserManagement UserService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject IAccessToken TokenService
@inject AuthenticationStateProvider AuthProvider

<PageTitle>Login - UserHub</PageTitle>

<MudGrid>
    <MudPaper Class="pa-15 ma-2" Elevation="0" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudCard Elevation="3" Class="pa-10">
                <MudText Color="Color.Dark" GutterBottom Typo="Typo.h3" Align="Align.Center">Login to UserHub</MudText>
                <MudForm Model="model">
                        <MudTextField T="string" @bind-Value="model.Username" Label="Username" Variant="Variant.Outlined" Required="true" RequiredError="User name is required!"/>
                        <MudTextField T="string" @bind-Value="model.Password" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" Required="true" RequiredError="Password is required!"/>
                        <MudPaper Elevation="0" Class="ml-auto mt-5 d-flex justify-space-between">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="" OnClick="OnLogin">Login</MudButton>
                            <MudText>
                                Dont have an account?
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/register">Sign-up</MudButton>
                            </MudText>
                        </MudPaper>
                </MudForm>   
            </MudCard>
            @if (!success)
            {
                <MudAlert Class="mt-5" Severity="Severity.Error">Invalid username or password, please try again.</MudAlert>
            }
        </MudContainer>
    </MudPaper>
</MudGrid>


@code {
    private LoginForm model = new LoginForm();
    bool success = true;

    protected async Task OnLogin()
    {
        var user = UserService.VerifyLogin(model.Username, model.Password);

        if(user != null)
        {
            await LocalStorageService.SetItemAsync("UserHubToken", TokenService.CreateAccessToken(user));
            ((JWTAuthStateProvider)AuthProvider).UserAuthenticated(user);
            NavigationManager.NavigateTo("/dashboard");
        }
        else
        {
            success = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }
}